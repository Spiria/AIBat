package tabs;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Map;

import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.UIManager;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

import aibat.Util;
import javax.swing.JLabel;

public abstract class AIBatTab extends JPanel {
    // protected String[] TITLES;

    // allContent maps section titles to their content
    protected Map<String, String> allContent;

    private static final String TIME_REGEX = "(\\d{2}:\\d{2}:\\d{3}(?: \\(\\d+\\))?(?: - )?)";
    private static final String LINK_REGEX = "<a href=\"$1\">$1</a>";
    protected static final String FORMAT_TO_HTML = "<b><a href=\"%2$s\">%1$s</a></b>\n%2$s";

    private JEditorPane textArea = new JEditorPane();
    private final JEditorPane dtrpnNavigationPane = new JEditorPane();
    private final JLabel lblNavigationPane = new JLabel("Navigation");
    
    public AIBatTab(Object obj)
    {
	this();
    }

    public AIBatTab() {
	drawGUI();
	fillAllContent();
	showText(allContentToString(FORMAT_TO_HTML));

    }

    protected void drawGUI() {
	setBackground(Color.LIGHT_GRAY);

	Font font = UIManager.getFont("Label.font");
	String bodyRule = "body { font-family: " + font.getFamily() + "; "
		+ "font-size: " + font.getSize() + "pt; }";

	// Format textArea to do HTML
	textArea.setEditorKit(new HTMLEditorKit());
	textArea.setForeground(Color.BLACK);
	((HTMLDocument) textArea.getDocument()).getStyleSheet().addRule(
		bodyRule);

	textArea.setEditable(false);
	// TODO fix so it's not *always* TEXT_CURSOR
	textArea.setCursor(new Cursor(Cursor.TEXT_CURSOR));
	textArea.addHyperlinkListener(new HyperlinkCopier());
	textArea.setText("Content Pane");
	JScrollPane scrollPane = new JScrollPane(textArea);

	// Autogenerated GUI stuff.
	GridBagLayout gridBagLayout = new GridBagLayout();
	gridBagLayout.columnWidths = new int[] { 154, 520, 0 };
	gridBagLayout.rowHeights = new int[] { 129, 0, 303, 0 };
	gridBagLayout.columnWeights = new double[] { 0.0, 1.0, Double.MIN_VALUE };
	gridBagLayout.rowWeights = new double[] { 0.0, 0.0, 1.0,
		Double.MIN_VALUE };
	setLayout(gridBagLayout);

	GridBagConstraints gbc_scrollPane = new GridBagConstraints();
	gbc_scrollPane.gridheight = 3;
	gbc_scrollPane.fill = GridBagConstraints.BOTH;
	gbc_scrollPane.insets = new Insets(5, 0, 5, 50);
	gbc_scrollPane.gridx = 1;
	gbc_scrollPane.gridy = 0;
	add(scrollPane, gbc_scrollPane);

	GridBagConstraints gbc_lblNavigationPane = new GridBagConstraints();
	gbc_lblNavigationPane.insets = new Insets(0, 0, 5, 5);
	gbc_lblNavigationPane.gridx = 0;
	gbc_lblNavigationPane.gridy = 1;
	add(lblNavigationPane, gbc_lblNavigationPane);

	GridBagConstraints gbc_dtrpnNavigationPane = new GridBagConstraints();
	gbc_dtrpnNavigationPane.insets = new Insets(0, 5, 0, 5);
	gbc_dtrpnNavigationPane.fill = GridBagConstraints.BOTH;
	gbc_dtrpnNavigationPane.gridx = 0;
	gbc_dtrpnNavigationPane.gridy = 2;
	dtrpnNavigationPane.setBackground(Color.LIGHT_GRAY);
	dtrpnNavigationPane.setText("Contents");
	add(dtrpnNavigationPane, gbc_dtrpnNavigationPane);

    }

    public void showText(String toShow) {
	toShow = toShow.replaceAll(TIME_REGEX, LINK_REGEX);
	toShow = toShow.replaceAll("\\n", "<br />");
	textArea.setText(toShow);

	// TODO get scrolling to work properly
	// textArea.scrollRectToVisible( new Rectangle( 100, 100, 100, 100 ) );

	// try
	// {
	// Rectangle r = textArea.modelToView( 10 );
	// System.out.println(r==null);
	// textArea.scrollRectToVisible( r );
	// }
	// catch ( BadLocationException e )
	// {
	// e.printStackTrace();
	// }
    }

    private class HyperlinkCopier implements HyperlinkListener {
	@Override
	public void hyperlinkUpdate(HyperlinkEvent e) {
	    if (e.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED)) {
		Util.copyStringToClipboard(e.getDescription());
		// TODO Add hover reminder
	    }
	}
    }

    protected abstract void fillAllContent();

    protected String allContentToString(String format) {
	StringBuffer result = new StringBuffer();
	for (Map.Entry<String, String> entry : allContent.entrySet()) {

	    String title = entry.getKey();
	    String content = entry.getValue();

	    if (content == null || content.length() == 0)
		break;
	    result.append(String.format(format, title, content));

	}
	return result.toString();
    }

    public static void main(String[] args) {
	System.out.println(String.format(FORMAT_TO_HTML, "1d", "2d"));
    }

}
